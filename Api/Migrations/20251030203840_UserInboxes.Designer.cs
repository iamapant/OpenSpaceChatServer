// <auto-generated />
using System;
using Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251030203840_UserInboxes")]
    partial class UserInboxes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Database.Models.Channel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Radius")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Api.Database.Models.ChannelSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int?>("MessageArchiveThreshold")
                        .HasColumnType("integer");

                    b.Property<long>("MessageDuration")
                        .HasColumnType("bigint");

                    b.Property<int?>("MessageHighlightThreshold")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ChannelSettings");
                });

            modelBuilder.Entity("Api.Database.Models.CuratorSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("DefaultChannelRadiusInKm")
                        .HasColumnType("double precision");

                    b.Property<int>("DefaultMessageArchiveThreshold")
                        .HasColumnType("integer");

                    b.Property<float>("DefaultMessageDurationInHour")
                        .HasColumnType("real");

                    b.Property<int>("DefaultMessageHighlightThreshold")
                        .HasColumnType("integer");

                    b.Property<float>("DefaultTimeoutPeriodInMinute")
                        .HasColumnType("real");

                    b.Property<float>("LandmarkTaggableRangeInKm")
                        .HasColumnType("real");

                    b.Property<float>("PrivateMessagePublishDeadlineInHour")
                        .HasColumnType("real");

                    b.Property<int>("PublicMessageFrequencyIntervalInSecond")
                        .HasColumnType("integer");

                    b.Property<float>("PublicMessageFrequencyPerInterval")
                        .HasColumnType("real");

                    b.Property<float>("UserChatRangeInKm")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("CuratorSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DefaultChannelRadiusInKm = 1.0,
                            DefaultMessageArchiveThreshold = 20,
                            DefaultMessageDurationInHour = 2f,
                            DefaultMessageHighlightThreshold = 5,
                            DefaultTimeoutPeriodInMinute = 20f,
                            LandmarkTaggableRangeInKm = 0.1f,
                            PrivateMessagePublishDeadlineInHour = 0.25f,
                            PublicMessageFrequencyIntervalInSecond = 5,
                            PublicMessageFrequencyPerInterval = 5f,
                            UserChatRangeInKm = 0.3f
                        });
                });

            modelBuilder.Entity("Api.Database.Models.FontFamily", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Family")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.ToTable("FontFamilies");
                });

            modelBuilder.Entity("Api.Database.Models.FontStyle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<float>("LetterSpacing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(0f);

                    b.Property<float>("LineSpacing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(1.2f);

                    b.Property<float>("SizeInPx")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("real")
                        .HasDefaultValue(14f);

                    b.Property<string>("Style")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("TextDecoration")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TextTransform")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(400);

                    b.HasKey("Id");

                    b.ToTable("FontStyles");
                });

            modelBuilder.Entity("Api.Database.Models.Inbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("PinnedMessageId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("PinnedMessageId")
                        .IsUnique();

                    b.ToTable("Inboxes");
                });

            modelBuilder.Entity("Api.Database.Models.Landmark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("IconUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("InfoUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.ToTable("Landmarks");
                });

            modelBuilder.Entity("Api.Database.Models.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Content")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LandmarkId")
                        .HasColumnType("uuid");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LandmarkId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Api.Database.Models.MessageFrame", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MessageFrames");
                });

            modelBuilder.Entity("Api.Database.Models.MessageFrameOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ColorPrimary")
                        .HasColumnType("integer");

                    b.Property<int>("ColorSecondary")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("MessageFrameOptions");
                });

            modelBuilder.Entity("Api.Database.Models.MessageReaction", b =>
                {
                    b.Property<string>("MessageId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reaction")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("MessageId", "UserId");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserId");

                    b.ToTable("MessageReacts");
                });

            modelBuilder.Entity("Api.Database.Models.MessageStickerStyle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("PositionX")
                        .HasColumnType("double precision");

                    b.Property<double>("PositionY")
                        .HasColumnType("double precision");

                    b.Property<float>("Rotation")
                        .HasColumnType("real");

                    b.Property<double>("SizeX")
                        .HasColumnType("double precision");

                    b.Property<double>("SizeY")
                        .HasColumnType("double precision");

                    b.Property<string>("StickerUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.ToTable("MessageStickerStyles");
                });

            modelBuilder.Entity("Api.Database.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("019a3685-bab8-7dc4-ac85-8d0bb0d63218"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("019a3686-1b37-7087-9600-399694d0e4a1"),
                            Name = "Curator"
                        },
                        new
                        {
                            Id = new Guid("019a3686-49f2-71d6-97bd-a2bb8e42da8e"),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Api.Database.Models.SupportTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SupportTickets");
                });

            modelBuilder.Entity("Api.Database.Models.SupportTicketData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("SupportTicketId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("SupportTicketId");

                    b.ToTable("SupportTicketData");
                });

            modelBuilder.Entity("Api.Database.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(260)
                        .HasColumnType("character varying(260)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("019a3686-7e19-75d0-bf65-96f0f919394e"),
                            Created = new DateTime(1, 1, 1, 1, 1, 1, 0, DateTimeKind.Utc),
                            IsActive = true,
                            Name = "Admin",
                            PasswordHash = "$argon2id$v=19$m=65536,t=3,p=1$eI12WvnpYPXzPf4AG5Bsfg$fZLnznwn3EsME9EM1MG/N5ktw61J8adMYcH8JY9+gUg",
                            RoleId = new Guid("019a3685-bab8-7dc4-ac85-8d0bb0d63218")
                        });
                });

            modelBuilder.Entity("Api.Database.Models.UserBlacklist", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BlacklistId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Since")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Temporary")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("Until")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "BlacklistId");

                    b.ToTable("Blacklists");
                });

            modelBuilder.Entity("Api.Database.Models.UserInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Bio")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("Country")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("CoverUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("DoB")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("FontFamilyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FontStyleId")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("MessageFrameId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MessageFrameOptionsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FontFamilyId");

                    b.HasIndex("FontStyleId");

                    b.HasIndex("MessageFrameId");

                    b.HasIndex("MessageFrameOptionsId");

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("019a3686-7e19-75d0-bf65-96f0f919394e"),
                            DoB = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin123@gmail.com",
                            FirstName = "admin",
                            Updated = new DateTime(1, 1, 1, 1, 1, 1, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Api.Database.Models.UserMessageDecoration", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FrameId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FrameOptionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("NoteFontFamilyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("NoteFontStyleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.HasIndex("FrameId");

                    b.HasIndex("FrameOptionsId");

                    b.HasIndex("NoteFontFamilyId");

                    b.HasIndex("NoteFontStyleId");

                    b.ToTable("UserMessageDecorations");
                });

            modelBuilder.Entity("Api.Database.Models.UserTimeout", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "ChannelId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserTimeouts");
                });

            modelBuilder.Entity("ChannelPublicMessage", b =>
                {
                    b.Property<Guid>("ChannelsId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessagesId")
                        .HasColumnType("character varying(100)");

                    b.HasKey("ChannelsId", "MessagesId");

                    b.HasIndex("MessagesId");

                    b.ToTable("ChannelPublicMessage");
                });

            modelBuilder.Entity("InboxUser", b =>
                {
                    b.Property<Guid>("InboxesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("InboxesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("InboxUser");
                });

            modelBuilder.Entity("MessageStickerStylePrivateArchive", b =>
                {
                    b.Property<string>("PrivateArchivesId")
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("StickersId")
                        .HasColumnType("uuid");

                    b.HasKey("PrivateArchivesId", "StickersId");

                    b.HasIndex("StickersId");

                    b.ToTable("MessageStickerStylePrivateArchive");
                });

            modelBuilder.Entity("MessageStickerStylePublicArchive", b =>
                {
                    b.Property<string>("PublicArchivesId")
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("StickersId")
                        .HasColumnType("uuid");

                    b.HasKey("PublicArchivesId", "StickersId");

                    b.HasIndex("StickersId");

                    b.ToTable("MessageStickerStylePublicArchive");
                });

            modelBuilder.Entity("Api.Database.Models.PrivateMessage", b =>
                {
                    b.HasBaseType("Api.Database.Models.Message");

                    b.Property<Guid>("InboxId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InboxId1")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PinnedDmId")
                        .HasColumnType("uuid");

                    b.ToTable("PrivateMessages");
                });

            modelBuilder.Entity("Api.Database.Models.PublicMessage", b =>
                {
                    b.HasBaseType("Api.Database.Models.Message");

                    b.ToTable("PublicMessages");
                });

            modelBuilder.Entity("Api.Database.Models.PrivateArchive", b =>
                {
                    b.HasBaseType("Api.Database.Models.PrivateMessage");

                    b.Property<Guid>("ArchivedUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FrameId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FrameOptionsId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("NoteFontFamilyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("NoteFontStyleId")
                        .HasColumnType("uuid");

                    b.HasIndex("ArchivedUserId");

                    b.HasIndex("FrameId");

                    b.HasIndex("FrameOptionsId");

                    b.HasIndex("NoteFontFamilyId");

                    b.HasIndex("NoteFontStyleId");

                    b.ToTable("PrivateArchives");
                });

            modelBuilder.Entity("Api.Database.Models.PublicArchive", b =>
                {
                    b.HasBaseType("Api.Database.Models.PublicMessage");

                    b.Property<Guid?>("FrameId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FrameOptionsId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("NoteFontFamilyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("NoteFontStyleId")
                        .HasColumnType("uuid");

                    b.HasIndex("FrameId");

                    b.HasIndex("FrameOptionsId");

                    b.HasIndex("NoteFontFamilyId");

                    b.HasIndex("NoteFontStyleId");

                    b.HasIndex("LandmarkId", "Created");

                    b.ToTable("PublicArchives");
                });

            modelBuilder.Entity("Api.Database.Models.Channel", b =>
                {
                    b.HasOne("Api.Database.Models.User", null)
                        .WithMany("Channels")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Api.Database.Models.ChannelSetting", b =>
                {
                    b.HasOne("Api.Database.Models.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("Api.Database.Models.Inbox", b =>
                {
                    b.HasOne("Api.Database.Models.PrivateMessage", "PinnedMessage")
                        .WithOne("PinnedDm")
                        .HasForeignKey("Api.Database.Models.Inbox", "PinnedMessageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("PinnedMessage");
                });

            modelBuilder.Entity("Api.Database.Models.Message", b =>
                {
                    b.HasOne("Api.Database.Models.Landmark", "Landmark")
                        .WithMany("Messages")
                        .HasForeignKey("LandmarkId");

                    b.HasOne("Api.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Landmark");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Database.Models.MessageReaction", b =>
                {
                    b.HasOne("Api.Database.Models.Message", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Database.Models.User", "User")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Database.Models.SupportTicket", b =>
                {
                    b.HasOne("Api.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Database.Models.SupportTicketData", b =>
                {
                    b.HasOne("Api.Database.Models.SupportTicket", "SupportTicket")
                        .WithMany("Data")
                        .HasForeignKey("SupportTicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportTicket");
                });

            modelBuilder.Entity("Api.Database.Models.User", b =>
                {
                    b.HasOne("Api.Database.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Api.Database.Models.UserBlacklist", b =>
                {
                    b.HasOne("Api.Database.Models.User", "Blacklist")
                        .WithMany("BlacklistedBys")
                        .HasForeignKey("BlacklistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Database.Models.User", "User")
                        .WithMany("Blacklists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Blacklist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Database.Models.UserInfo", b =>
                {
                    b.HasOne("Api.Database.Models.FontFamily", null)
                        .WithMany("UserDefaults")
                        .HasForeignKey("FontFamilyId");

                    b.HasOne("Api.Database.Models.FontStyle", null)
                        .WithMany("UserDefaults")
                        .HasForeignKey("FontStyleId");

                    b.HasOne("Api.Database.Models.User", "User")
                        .WithOne("UserInfo")
                        .HasForeignKey("Api.Database.Models.UserInfo", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Database.Models.MessageFrame", null)
                        .WithMany("UserDefaults")
                        .HasForeignKey("MessageFrameId");

                    b.HasOne("Api.Database.Models.MessageFrameOptions", null)
                        .WithMany("UserDefaults")
                        .HasForeignKey("MessageFrameOptionsId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Database.Models.UserMessageDecoration", b =>
                {
                    b.HasOne("Api.Database.Models.MessageFrame", "Frame")
                        .WithMany()
                        .HasForeignKey("FrameId");

                    b.HasOne("Api.Database.Models.MessageFrameOptions", "FrameOptions")
                        .WithMany()
                        .HasForeignKey("FrameOptionsId");

                    b.HasOne("Api.Database.Models.FontFamily", "NoteFontFamily")
                        .WithMany()
                        .HasForeignKey("NoteFontFamilyId");

                    b.HasOne("Api.Database.Models.FontStyle", "NoteFontStyle")
                        .WithMany()
                        .HasForeignKey("NoteFontStyleId");

                    b.HasOne("Api.Database.Models.User", "User")
                        .WithOne("MessageDecoration")
                        .HasForeignKey("Api.Database.Models.UserMessageDecoration", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Frame");

                    b.Navigation("FrameOptions");

                    b.Navigation("NoteFontFamily");

                    b.Navigation("NoteFontStyle");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Api.Database.Models.UserTimeout", b =>
                {
                    b.HasOne("Api.Database.Models.Channel", "Channel")
                        .WithMany("UserTimeouts")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Database.Models.User", "User")
                        .WithOne("Timeout")
                        .HasForeignKey("Api.Database.Models.UserTimeout", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChannelPublicMessage", b =>
                {
                    b.HasOne("Api.Database.Models.Channel", null)
                        .WithMany()
                        .HasForeignKey("ChannelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Database.Models.PublicMessage", null)
                        .WithMany()
                        .HasForeignKey("MessagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InboxUser", b =>
                {
                    b.HasOne("Api.Database.Models.Inbox", null)
                        .WithMany()
                        .HasForeignKey("InboxesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Database.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageStickerStylePrivateArchive", b =>
                {
                    b.HasOne("Api.Database.Models.PrivateArchive", null)
                        .WithMany()
                        .HasForeignKey("PrivateArchivesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Database.Models.MessageStickerStyle", null)
                        .WithMany()
                        .HasForeignKey("StickersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MessageStickerStylePublicArchive", b =>
                {
                    b.HasOne("Api.Database.Models.PublicArchive", null)
                        .WithMany()
                        .HasForeignKey("PublicArchivesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Database.Models.MessageStickerStyle", null)
                        .WithMany()
                        .HasForeignKey("StickersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Database.Models.PrivateMessage", b =>
                {
                    b.HasOne("Api.Database.Models.Message", null)
                        .WithOne()
                        .HasForeignKey("Api.Database.Models.PrivateMessage", "Id");

                    b.HasOne("Api.Database.Models.Inbox", "Inbox")
                        .WithMany("Messages")
                        .HasForeignKey("InboxId1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Inbox");
                });

            modelBuilder.Entity("Api.Database.Models.PublicMessage", b =>
                {
                    b.HasOne("Api.Database.Models.Message", null)
                        .WithOne()
                        .HasForeignKey("Api.Database.Models.PublicMessage", "Id");
                });

            modelBuilder.Entity("Api.Database.Models.PrivateArchive", b =>
                {
                    b.HasOne("Api.Database.Models.User", "ArchivedUser")
                        .WithMany()
                        .HasForeignKey("ArchivedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Api.Database.Models.MessageFrame", "Frame")
                        .WithMany("PrivateArchives")
                        .HasForeignKey("FrameId");

                    b.HasOne("Api.Database.Models.MessageFrameOptions", "FrameOptions")
                        .WithMany("PrivateArchives")
                        .HasForeignKey("FrameOptionsId");

                    b.HasOne("Api.Database.Models.PrivateMessage", null)
                        .WithOne()
                        .HasForeignKey("Api.Database.Models.PrivateArchive", "Id");

                    b.HasOne("Api.Database.Models.FontFamily", "NoteFontFamily")
                        .WithMany("PrivateArchives")
                        .HasForeignKey("NoteFontFamilyId");

                    b.HasOne("Api.Database.Models.FontStyle", "NoteFontStyle")
                        .WithMany("PrivateArchives")
                        .HasForeignKey("NoteFontStyleId");

                    b.Navigation("ArchivedUser");

                    b.Navigation("Frame");

                    b.Navigation("FrameOptions");

                    b.Navigation("NoteFontFamily");

                    b.Navigation("NoteFontStyle");
                });

            modelBuilder.Entity("Api.Database.Models.PublicArchive", b =>
                {
                    b.HasOne("Api.Database.Models.MessageFrame", "Frame")
                        .WithMany("PublicArchives")
                        .HasForeignKey("FrameId");

                    b.HasOne("Api.Database.Models.MessageFrameOptions", "FrameOptions")
                        .WithMany("PublicArchives")
                        .HasForeignKey("FrameOptionsId");

                    b.HasOne("Api.Database.Models.PublicMessage", null)
                        .WithOne()
                        .HasForeignKey("Api.Database.Models.PublicArchive", "Id");

                    b.HasOne("Api.Database.Models.FontFamily", "NoteFontFamily")
                        .WithMany("PublicArchives")
                        .HasForeignKey("NoteFontFamilyId");

                    b.HasOne("Api.Database.Models.FontStyle", "NoteFontStyle")
                        .WithMany("PublicArchives")
                        .HasForeignKey("NoteFontStyleId");

                    b.Navigation("Frame");

                    b.Navigation("FrameOptions");

                    b.Navigation("NoteFontFamily");

                    b.Navigation("NoteFontStyle");
                });

            modelBuilder.Entity("Api.Database.Models.Channel", b =>
                {
                    b.Navigation("UserTimeouts");
                });

            modelBuilder.Entity("Api.Database.Models.FontFamily", b =>
                {
                    b.Navigation("PrivateArchives");

                    b.Navigation("PublicArchives");

                    b.Navigation("UserDefaults");
                });

            modelBuilder.Entity("Api.Database.Models.FontStyle", b =>
                {
                    b.Navigation("PrivateArchives");

                    b.Navigation("PublicArchives");

                    b.Navigation("UserDefaults");
                });

            modelBuilder.Entity("Api.Database.Models.Inbox", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Api.Database.Models.Landmark", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Api.Database.Models.Message", b =>
                {
                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Api.Database.Models.MessageFrame", b =>
                {
                    b.Navigation("PrivateArchives");

                    b.Navigation("PublicArchives");

                    b.Navigation("UserDefaults");
                });

            modelBuilder.Entity("Api.Database.Models.MessageFrameOptions", b =>
                {
                    b.Navigation("PrivateArchives");

                    b.Navigation("PublicArchives");

                    b.Navigation("UserDefaults");
                });

            modelBuilder.Entity("Api.Database.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Api.Database.Models.SupportTicket", b =>
                {
                    b.Navigation("Data");
                });

            modelBuilder.Entity("Api.Database.Models.User", b =>
                {
                    b.Navigation("BlacklistedBys");

                    b.Navigation("Blacklists");

                    b.Navigation("Channels");

                    b.Navigation("MessageDecoration")
                        .IsRequired();

                    b.Navigation("Reactions");

                    b.Navigation("Timeout")
                        .IsRequired();

                    b.Navigation("UserInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Database.Models.PrivateMessage", b =>
                {
                    b.Navigation("PinnedDm");
                });
#pragma warning restore 612, 618
        }
    }
}
